{"/get_started/zh/usage/deploy_github_pages.html":{"title":"部署 teedoc 生成的网站到 github pages","content":" title: 部署 teedoc 生成的网站到 github pages keywords: teedoc, 部署 desc: teedoc 生成的网站部署到服务器 ## 克隆模板仓库 访问 [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) 点击 `Use this template` ![github use template](../../assets/images/github_use_template.jpg) 然后填写新的仓库名称和描述，基于这个仓库新建一个你自己的仓库，现在你获得了和 `teedoc`官网一模一样的仓库了 > 会发现有一个`.github/workflows`的目录，这个就是`github action`的配置文件，我们利用这个功能来实现： > 当我们更新仓库的源文件时， `github action`自动根据这个配置文件的命令构建生成静态网页，然后推送到这个仓库的`gh pages`分支 ## 生成 ssh 密钥 然后在本地生成一对`key`（windows下需要先安装相关软件，请自行安装（安装git就会有）） ``` ssh keygen t rsa f key.txt ``` 得到了`key.txt`和 `key.key.pub`两个文件 ## 设置密钥 到文档项目的设置里面设置`ssh`密钥, 添加一个`ssh`密钥， 拷贝 `key.txt.pub` 中的内容，注意是`pub`文件，即公钥，名字随便取 ![](../../assets/images/github_deploy_key.jpg) 然后点击`Secrets`，设置秘密键值对， 需要设置的变量有： * `ACCESS_KEY`: 复制`key.txt`中的内容 * `GIT_EMAIL`: 设置一个`git`提交邮箱，设置你的`github`邮箱即可 * `GIT_NAME`: 设置一个`git`提交名字，设置你的`github`名字即可 * `REPO`: 仓库地址， 设置为`组织名/仓库名`或者`用户名/仓库名`，比如`teedoc/teedoc.github.io`即可 ![](../../assets/images/github_secrets.jpg) ## 触发构建 像仓库提交一次修改，会自动触发构建， 可以在`Actions`栏看到进度和日志 如果是绿色的勾， 就代表成功了，否则就是失败了，可以点进去看构建日志报了什么错，一般都是前面的值填错了 ![](../../assets/images/github_action.jpg) ## 设置 pages 服务 然后在设置里面找到 `pages` 服务设置，打开即可，然后访问对应的域名， 比如这里是`https://teedoc.github.io/` >! 注意如果跟路径不是`/`，而且没有自定义域名，比如`https://teedoc.github.io/my_site/`， 则需要在`site_config.json`中配置`\"site_root_url\":\"/my_site/\"` ![](../../assets/images/github_pages.jpg)"},"/get_started/zh/usage/deploy_nginx.html":{"title":"使用 nginx 部署 teedoc 生成的网站到服务器","content":" title: 使用 nginx 部署 teedoc 生成的网站到服务器 keywords: teedoc, 部署, nginx desc: 使用 nginx 部署 teedoc 生成的网站到服务器 这里简要介绍，更多详细使用请自行查找文档或教程， 比如 `HTTPS` ## 安装 nginx 服务器安装 `nginx`， 比如`ubuntu`： ``` sudo apt update sudo apt install nginx ``` ## 配置并启动 nginx 服务 ``` nginx t ``` 可以看到配置文件路径，一般是`/etc/nginx/nginx.conf `， 可以看到文件里面包含了`/etc/nginx/site enabled/` 查看下面的`default`文件，可以看到语句 ``` listen 80 default_server; root /var/www/html; ``` 即监听`80`端口，网站根目录在这里，我们将我们的网站内容拷贝到这里，即`out`目录下所有文件拷贝到`/var/www/html/`目录下 然后： ``` service nginx start ``` 访问`http://ip:80`就可以访问到网站了，`:80`也可以省略， 也可以修改成其它端口，因为国内没有备案的网站不允许使用`80`端口，海外的服务器则没有限制"},"/get_started/zh/usage/sites.html":{"title":"使用了 teedoc 的网站","content":" title: 使用了 teedoc 的网站 keywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 写文档 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 使用了 teedoc 的网站 * [teedoc 官网](https://teedoc.github.io): 好用的文档网站生成工具 * [MaixPy3](https://maixpy3.sipeed.com): 边缘 AI 计算 Python SDK 期待你的使用， 欢迎[提交 issue](https://github.com/teedoc/teedoc.github.io/issues) 或者 PR 来添加你的网站"},"/get_started/zh/usage/start.html":{"title":"开始写文档","content":" title: 开始写文档 keywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 写文档 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的基本使用 ## 构建与预览 在有`site_config.json`的文档目录下执行 ``` teedoc serve ``` 在显示 `Starting server at 0.0.0.0:2333 ....` 后，就可以了 打开浏览器访问: [http://127.0.0.1:2333](http://127.0.0.1:2333) 实时修改文件，保存文件后，默认过`3`秒后，会自动重新构建这个文件，然后浏览器会自动刷新 > 自动刷新的延迟时间可以设置，可以加 ` t` 参数， 比如`teedoc t 0 serve`设置为`0`秒延迟， > 另外也可以在文档配置中设置，见后面配置参数`rebuild_changes_delay`的说明 如果只需要构建生成`HTML`页面，只需要执行 ``` teedoc build ``` >! 注意，如果是最终生成发布版本的文档， 一定要用`build`命令来生成网站页面，`serve`命令生成的页面只能用于本地预览，会有多余的预览相关的代码，不适合用在生产环境部署 另外，也可以指定参数` d`或者` dir` 来指定文档目录，这样就不用在文档目录下面执行命令了，比如 ``` teedoc d /home/teedoc/my_doc build ``` ## 构建文档删除 构建好的文档会被放到`out`目录下，程序不会主动删除，如果需要清除，请手动删除 ## 文档目录结构 ``` ├─.github ├─docs │ ├─develop │ │ ├─en │ │ └─zh │ └─get_started │ ├─assets │ ├─en │ └─zh ├─pages │ └─index │ ├─en │ └─zh ├─static │ └─site_config.json ``` * `.github`: 自动构建脚本，在后面的章节将如何使用 * `docs`: 文档，包含了多份文档， 每份文档都是单独一个文件夹 * `pages`: 页面，包括主页、404页面等等页面 * `static`: 静态文件文件夹，比如存放图片 * `site_config.json`: 网站配置文件 * `config.json`: 除了`site_config.json`外，每个文档目录下都可以有`config.json`用来配置文档相关页面 * `sidebar.json`: 文档目录 ## site_config.json 网站配置 网站的配置项，比如网站名称，页面路由，插件配置等等 下面的示例配置文件看起来配置项比较多，不要被吓到，其实很简单，主要几个配置项，掌握了就思想就容易了 配置文件是`json`格式， 比如： ```json { \"site_name\": \"teedoc\", \"site_slogon\": \"happy to write\", \"route\": { \"docs\": { \"/get_started/zh\": \"docs/get_started/zh\", \"/get_started/en\": \"docs/get_started/en\", \"/develop/zh\": \"docs/develop/zh\", \"/develop/en\": \"docs/develop/en\" }, \"pages\": { \"/\": \"pages/index/zh\", \"/en\": \"pages/index/en\" }, \"assets\": { \"/static\": \"static\", \"/get_started/assets\": \"docs/get_started/assets\" }, \"/blog\": \"blog\" }, \"executable\": { \"python\": \"python3\", \"pip\": \"pip3\" }, \"plugins\": { \"teedoc plugin markdown parser\":{ \"from\": \"pypi\", \"config\": { } }, \"teedoc plugin theme default\":{ \"from\": \"pypi\", \"config\": { \"dark\": true, \"env\":{ \"main_color\": \"#4caf7d\" }, \"css\": \"/static/css/custom.css\", \"js\": \"/static/js/custom.js\" } } } } ``` * `site_name`: 网站名 * `site_slogon`: 网站标语 * `route`: 网页路由，包含了文档和页面以及资源文件的路由，比如文档的路由 ```json \"docs\": { \"/get_started/zh\": \"docs/get_started/zh\", \"/get_started/en\": \"docs/get_started/en\", \"/develop/zh\": \"docs/develop/zh\", \"/develop/en\": \"docs/develop/en\" }, ``` `key`代表了最终生成的网站中文档的`url`, 后面的值则是对应的源文档路径， 比如源文档`docs/get_started/zh/README.md`，构建后会生成文件`out/get_started/zh/index.html`, 如果不是`md`文件（即不支持的文件），则会原封不动地拷贝文件，最后`out`目录就是生成的网站 `pages`同理，`assets`则不会进行文档转换，直接拷贝到相应的目录 * `executable`: 可执行程序设置， 这里可以设置`python`和`pip`的可执行程序名，在安装插件时会用到 * `plugins`: 插件配置， 主要有名字， 来源， 配置项组成。 名字可以在[github](https://github.com) 搜索`teedoc plugin`来找到开源的插件，也欢迎你参与编写插件（只需要动 `Python` 语法即可）； `from`字段填`pypi`即可，如果插件下载到了本地也可以填写文件夹路径，也可以直接填`git`路径比如`git+https://github.com/*****/******.git` 配置项则由具体的插件决定，比如`teedoc plugin theme default`就有`dark`选项来选择是否启用暗黑主题 * `rebuild_changes_delay`: 检测到文件更改后，延迟多少秒自动重新生成该文档， 浏览器中会自动刷新页面，默认为`3`秒，最短可以设置为`0`秒, 可以使用`teedoc t 3 serve` 或者 `teedoc delay serve` 来覆盖这个设置 ## config.json 文档配置 这是针对每个文档的配置，放在每个文档的根目录， 比如`docs/get_started/zh/config.json`， 各个文档相互独立，可以设置一样的来保持网站导航栏一致 在这里面可以配置每个文档的导航栏， 以及页尾（`footer`）的内容, 也可以设置插件的`config`项，在当前文档会覆盖`site_config.json`中的配置，从而实现不同文档不同语言（国际化/i18n）或者样式等 比如： ```json { \"navbar\": { \"title\": \"teedoc\", \"logo\": { \"alt\": \"teedoc logo\", \"src\": \"/static/image/logo.png\" }, \"home_url\": \"/\", \"items\": [ { \"url\": \"/get_started/zh\", \"label\": \"安装使用\", \"position\": \"left\" }, { \"url\": \"/develop/zh\", \"label\": \"开发\", \"position\": \"left\" }, { \"url\": \"https://github.com/neutree/teedoc\", \"label\": \"github\", \"target\": \"_blank\", \"position\": \"right\" }, { \"label\": \"语言: \", \"position\": \"right\", \"items\": [ { \"url\": \"/get_started/zh\", \"label\": \"中文\" }, { \"url\": \"/get_started/en\", \"label\": \"English\" } ] } ] }, \"footer\":{ \"items\":[ { \"url\": \"https://github.com/neutree/teedoc\", \"label\": \"github\", \"target\": \"_blank\", \"position\": \"left\" }, { \"url\": \"https://github.com/neutree/teedoc\", \"label\": \"使用 teedoc 生成\", \"target\": \"_blank\", \"position\": \"right\" }, { \"url\": \"https://neucrack.com\", \"label\": \"neucrack\", \"target\": \"_blank\", \"position\": \"right\" }, { \"url\": \"https://beian.miit.gov.cn\", \"label\": \"*ICP备********号 1\", \"target\": \"_blank\", \"position\": \"middle\" }, { \"url\": \"https://beian.miit.gov.cn/#/Integrated/index\", \"label\": \"*公网安备**************号\", \"target\": \"_blank\", \"position\": \"middle\" } ] }, \"plugins\": { \"teedoc plugin search\":{ \"config\": { \"search_hint\": \"搜索\", \"input_hint\": \"输入关键词，多关键词空格隔开\", \"loading_hint\": \"正在加载，请稍候。。。\", \"download_err_hint\": \"下载文件失败，请刷新重试或检查网络\", \"other_docs_result_hint\": \"来自其它文档的结果\", \"curr_doc_result_hint\": \"当前文档搜索结果\" } } } } ``` ## sidebar.json 文档目录（侧边栏）设置 这里面设置文档的目录，每个文档一份，相互独立 文件路径使用相对路径，填文件名即可， `README.md` 会被自动转换成`index.html` 另外也可以不写`file`路径，直接`url`， 比如`\"url\": \"/get_started/zh\"`, 同时可以设置`\"target\":\"_blank\"` 在新窗口打开，不设置则在当前窗口打开 比如： ```json { \"items\":[ { \"label\": \"teedoc 简介\", \"file\": \"README.md\" }, { \"label\": \"安装 teedoc\", \"file\": \"install/README.md\" }, { \"label\": \"开始写文档\", \"file\": \"usage/start.md\" }, { \"label\": \"插件\", \"file\": \"plugins/README.md\", \"items\":[ { \"label\": \"主题插件\", \"file\": \"plugins/themes.md\" }, { \"label\": \"其它插件\", \"file\": \"plugins/others.md\" } ] }, { \"label\": \"markdown 语法\", \"file\": \"syntax/syntax_markdown.md\" }, { \"label\": \"使用了 teedoc 的网站\", \"file\": \"usage/sites.md\" }, { \"label\": \"更多样例\", \"items\":[ { \"label\": \"二级子目录样例\", \"items\":[ { \"label\": \"三级子目录样例\", \"items\":[ { \"label\": \"文章1\", \"file\": \"more/example_docs/doc1.md\" } ] }, { \"label\": \"文章2\", \"file\": \"more/example_docs/doc2.md\" } ] }, { \"label\": \"这是一个链接\", \"url\": \"https://github.com/teedoc/teedoc\", \"target\": \"_blank\" } ] } ] } ``` ## 链接、图片等资源文件 放在文档目录下面的文件，如果是可是识别的文件，比如`*.md`， 则会转换成`*.html`， 如果不能识别，比如`*.jpg`， 则会原封不动地拷贝 ### 最简单和推荐的方法 资源文件可以放在文档对应的目录，比如文档`docs/get_started/zh`， 可以创建`docs/get_started/zh/assets/images/logo.png`, 然后在`docs/get_started/zh/README.md`中使用相对路径引用，即`![](assets/images/logo.png)` ### 进阶方法 这种情况适用于多份文档都引用同一个文件夹下（`url`）的资源， 方便维护多份文档，比如多语言翻译，或者减少 `CDN` 流量消耗 使用文档路径外的资源，在`site_config.json` 中配置 ```json { \"route\": { \"docs\": { \"/get_started/zh\": \"docs/get_started/zh\", }, \"assets\": { \"/get_started/assets\": \"docs/get_started/assets\" } } } ``` 这个设置会将`docs/get_started/assets`整个目录拷贝为`/get_started/assets` 所以只需要在`docs/get_started/zh/README.md`中使用相对路径引用，即`![](../assets/images/logo.png)`"},"/get_started/zh/install/index.html":{"title":"teedoc 安装使用","content":" title: teedoc 安装使用 keywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站, 安装, 使用 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的使用方法 ## 使用方法 需要先安装`Python3` （仅支持 `Python3`） 比如在`Ubuntu`上： ``` sudo apt install python3 python3 pip ``` `Windows` 和 `macOS`请到[官网下载](https://www.python.org/downloads/) ### 安装 打开终端，输入： ``` pip3 install teedoc ``` 以后使用以下命令来更新软件： ``` pip3 install teedoc upgrade ``` 现在你可以在终端使用 `teedoc` 命令了 如果不能，请检查是不是`Python`可执行目录没有加入到环境变量 `PATH`, 比如可能在 `~/.local/bin` ### 构建网页 * 获取文档模板工程 ``` git clone https://github.com/teedoc/teedoc.github.io my_site ``` * 安装插件 这会根据`site_config.sjon`中的`plugins`的插件设置安装插件 ``` cd my_site teedoc install ``` * 构建 `HTML` 页面并起一个`HTTP`服务 ``` teedoc serve ``` 这个命令会先构建所有`HTML`页面以及拷贝资源文件，然后起一个`HTTP`服务 如果只需要生成页面，使用 ``` teedoc build ``` 在显示 `Starting server at 0.0.0.0:2333 ....` 后，就可以了 打开浏览器访问: [http://127.0.0.1:2333](http://127.0.0.1:2333) 同时可以看到目录下多了一个`out`目录，里面就是生成的静态网站内容，直接拷贝到服务器使用`nginx`或者`apache`进行部署即可 ### 在 github 上基于模板仓库创建新仓库 访问 [https://github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) 点击 `Use this template` ![github use template](../../assets/images/github_use_template.jpg) 然后填写新的仓库名称和描述，基于这个仓库新建一个你自己的仓库，现在你获得了和 `teedoc`官网一模一样的仓库了 然后使用`git clone 你的仓库地址`就可以克隆到本地了"},"/get_started/zh/more/example_docs/doc1.html":{"title":"","content":""},"/get_started/zh/more/example_docs/doc2.html":{"title":"TensorFlow Linux GPU + jupyterlab 环境安装 （Docker） (Ubuntu Deepin Manjaro)","content":" title: TensorFlow Linux GPU + jupyterlab 环境安装 （Docker） (Ubuntu Deepin Manjaro) keywords: tensorflow gpu jupyterlab docker deepin ubuntu linux 环境 安装 NVIDIA 驱动 docker desc: Tensorflow Linux 下 GPU + Docker 环境安装 > 版权声明：本文为 neucrack 的原创文章，遵循 CC 4.0 BY SA 版权协议，转载请附上原文出处链接及本声明。 > 原文链接：[https://neucrack.com/p/116](https://neucrack.com/p/116) 这里使用 docker ， 安装环境更加简单（只需要装 NVIDIA 驱动，不需要装cuda，当然也不用为cuda版本烦恼）稳定～ 而且可以同时运行多个 docker，比如同时运行多个 jupyterlab 给不同人使用 ## 安装docker 安装 docker，**版本必须是19.03及以上**（可以使用`docker version` 查看），如果版本低于这个版本，后面使用`nvidia docker` 驱动就会失败，会提示找不到` gpu all` 参数 ### 安装 * 如果是Manjaro， 直接`yay S docker` * 其他发行版： 参见官方教程：https://docs.docker.com/install/linux/docker ce/debian/ > deepin 是基于 debian 9.0 > 如果是 deepin 则需要修改 `sudo vim /usr/share/python apt/templates/Deepin.info` 里面的unstable为stable > 并使用命令`sudo add apt repository \"deb [arch amd64] https://download.docker.com/linux/debian stretch stable\"` ### 设置代理 如果下载慢，可能需要设置代理， 也可以不使用官方镜像，使用国内的镜像，比如 daocloud 镜像加速 docker 代理设置参考： https://neucrack.com/p/286 pull 镜像的时候可以设置代理让拉取更快， 创建容器时建议将代理去掉 ### 设置当前用户可以访问docker（非root） 参考这里： https://docs.docker.com/install/linux/linux postinstall/ ``` sudo groupadd docker sudo usermod aG docker $USER newgrp docker # 或者重新开启终端即可，如果未生效，可重启 ``` ### 常用命令 `docker images `: 列出镜像列表 `docker run [options] image_name [command]`：从镜像新建一个容器 `docker ps `: 正在运行的容器 `docker ps a`: 所有容器，包括没有正在运行的 `docker rm container_name`：删除容器 `docker rmi image_name`：删除镜像 `docker start container_name`：启动容器 `docker attatch container_name`：附着到容器里 `docker exec conrainer_name [comand]`：在容器中执行命令 `docker logs container_name`: 查看容器执行log `docker build t image_name .`：从 Dockerfile 构建一个镜像 ### docker run 常用参数 ` it`：启用交互式终端 ` rm`：及时删除，不保存容器，即退出后就删除 ` gpus all`：启用所有GPU支持 ` p port1:port2`：宿主机和容器端口映射，port1为宿主机的端口 ` v volume1:volume2`：宿主机和容器的磁盘映射， volume1是宿主机的文件夹，比如映射`/home/${USER}/notes`到`/tf/notes` ` name name`：给容器取名，如果没有这个参数，名字就是随机生成的 ` device device:container_device`：挂在设备，比如`/dev/ttyUSB0:/dev/ttyUSB0` ` network host`： 使用宿主机的网络 ` restart`: 自动启动, 可以用这个设置开机自启, 如果run的时候忘了可以用`docker update restart always 容器名`来更新 ``` no:\t\t 不自动重启容器. (默认value) on failure: 容器发生error而退出(容器退出状态不为0)重启容器 unless stopped: \t在容器已经stop掉或Docker stoped/restarted的时候才重启容器 always: 在容器已经stop掉或Docker stoped/restarted的时候才重启容器 ``` ## 安装显卡驱动 显卡安装部分独立写了一篇， 参考[Linux Nvidia显卡安装](https://neucrack.com/p/252) ## 安装镜像 参考官方文档：https://www.tensorflow.org/install/docker 比如我这里Ubuntu：（一定看文档，可能会不一样，有更新） * 安装 [nvidia docker](https://github.com/NVIDIA/nvidia docker) 按照 `readme` 中的` installation guide` 安装即可， 比如 `Ubuntu`： ``` # Add the package repositories distribution $(. /etc/os release;echo $ID$VERSION_ID) curl s L https://nvidia.github.io/nvidia docker/gpgkey sudo apt key add curl s L https://nvidia.github.io/nvidia docker/$distribution/nvidia docker.list sudo tee /etc/apt/sources.list.d/nvidia docker.list sudo apt get update && sudo apt get install y nvidia container toolkit sudo systemctl restart docker ``` 如果是deepin，则需要改一下系统版本 ``` distribution \"ubuntu18.04\" curl s L https://nvidia.github.io/nvidia docker/gpgkey sudo apt key add curl s L https://nvidia.github.io/nvidia docker/$distribution/nvidia docker.list sudo tee /etc/apt/sources.list.d/nvidia docker.list sudo apt get update && sudo apt get install y nvidia container toolkit sudo systemctl restart docker ``` 如果是 Manjaro， 只需要命令 `yay S nvidia docker` 即可！（如果遇到下载慢，可以使用poipo设置全局代理，参考[终端代理设置方法](https://neucrack.com/p/275)） * 测试 nvidia docker 以及cuda能不能使用起来 使用`nvidia/cuda`这个镜像，这个镜像只是用来测试，用完也可以删掉，如果没有设置代理，不想花费太多时间拉取镜像，可以不用这个镜像，直接使用`tensorflow/tensorflow:latest gpu py3`这个镜像或者`neucrack/tensorflow gpu py3 jupyterlab`(或 `daocloud.io/neucrack/tensorflow gpu py3 jupyterlab`)这个镜像（推荐）（在前者的基础上装了jupyterlab， 而且做了更好的用户权限管理） ``` lspci grep i nvidia docker run gpus all rm nvidia/cuda nvidia smi ``` 比如： ``` ➜ ~ sudo docker run gpus all rm nvidia/cuda nvidia smi Tue Mar 10 15:57:12 2020 + + NVIDIA SMI 440.64 Driver Version: 440.64 CUDA Version: 10.2 + + + GPU Name Persistence M Bus Id Disp.A Volatile Uncorr. ECC Fan Temp Perf Pwr:Usage/Cap Memory Usage GPU Util Compute M. + + 0 GeForce GTX 106... Off 00000000:01:00.0 On N/A 33% 39C P0 27W / 120W 310MiB / 6075MiB 0% Default + + + + + + Processes: GPU Memory GPU PID Type Process name Usage + + ``` ``` Wed Mar 11 02:04:26 2020 + + NVIDIA SMI 430.40 Driver Version: 430.40 CUDA Version: 10.1 + + + GPU Name Persistence M Bus Id Disp.A Volatile Uncorr. ECC Fan Temp Perf Pwr:Usage/Cap Memory Usage GPU Util Compute M. + + 0 GeForce GTX 108... Off 00000000:04:00.0 Off N/A 35% 41C P5 25W / 250W 0MiB / 11178MiB 0% Default + + + + 1 GeForce GTX 108... Off 00000000:81:00.0 Off N/A 39% 36C P5 19W / 250W 0MiB / 11178MiB 2% Default + + + + + + Processes: GPU Memory GPU PID Type Process name Usage No running processes found + + ``` 如果驱动版本太低，这里就会提示需要更新驱动 同时注意到cuda版本是10.2，可能tensorflow只支持到10.1，如果是在宿主机上直接装tensorflow就会报错不支持，这里用docker的好处就体现了，不用理会，只需要保证驱动装好就可以了 deepin 出现了错误 ``` docker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused \"process_linux.go:449: container init caused \\\"process_linux.go:432: running prestart hook 0 caused \\\\\\\"error running hook: exit status 1, stdout: , stderr: nvidia container cli: ldcache error: open failed: /sbin/ldconfig.real: no such file or directory\\\\\\\\n\\\\\\\"\\\"\": unknown. ``` 参考这里的解决方法：https://github.com/NVIDIA/nvidia docker/issues/614 ，解决： ``` ln s /sbin/ldconfig /sbin/ldconfig.real ``` docker 出现错误：`nvidia container cli: initialization error: cuda error: unknown error` 重启系统得到解决 ## 运行 tensorflow with GPU 拉取镜像，直接拉取 ``` docker pull neucrack/tensorflow gpu py3 jupyterlab # docker pull tensorflow/tensorflow:latest gpu py3 jupyter # docker pull tensorflow/tensorflow # docker pull tensorflow/tensorflow:latest gpu ``` 国内可以使用放在 daocloud 的镜像，速度会快一些： ``` docker pull daocloud.io/neucrack/tensorflow gpu py3 jupyterlab ``` 执行测试语句： ``` docker run gpus all it rm neucrack/tensorflow gpu py3 jupyterlab python c \"import tensorflow as tf; print(' version:{}, gpu:{}, 1+2 {}'.format(tf.__version__, tf.test.is_gpu_available(), tf.add(1, 2).numpy()) );\" ``` > 如果使用了daocloud，镜像名需要修改成`daocloud.io/neucrack/tensorflow gpu py3 jupyterlab` 如果没问题，就会出现以下输出（会伴随一大堆调试信息，也可能有警告信息，可以仔细看一下）： ``` version:2.1.0, gpu:True, 1+2 3 ``` ## Jupyterlab ``` docker run gpus all name jupyterlab gpu it p 8889:8889 e USER_NAME $USER e USER_ID `id u $USER` e GROUP_NAME `id gn $USER` e GROUP_ID `id g $USER` v /home/${USER}:/tf neucrack/tensorflow gpu py3 jupyterlab ``` > 如果使用了daocloud，镜像名需要修改成`daocloud.io/neucrack/tensorflow gpu py3 jupyterlab` 然后就能用浏览器在`http://127.0.0.1:8889/`地址使用 `jupyterlab`了，而且目录对应了设置的`/home/${USER}`目录 ![jupyterlab](../../../assets/images/jupyterlab.jpg) ![jupyterlab.png](../../../assets/images/jupyterlab_1.jpg) 退出直接`Ctrl+C`即可 这个容器创建后会一直存在于电脑里，可以使用`docker ps a`查看到，下次启动使用 ``` docker start jupyterlab_gpu ``` 也可以附着到容器： ``` docker attatch jupyterlab_gpu ``` 停止容器： ``` docker stop jupyterlab_gpu ``` 删除容器： ``` docker rm jupyterlab_gpu ``` 修改 user 和 root 密码, 这样就可以使用 `sudo` 命令了 ``` docker exec it jupyterlab_gpu /bin/bash passwd $USER passwd root ``` 如果需要每次都重新新建一个容器，用完就删除，只需要在`run`命令后面添加一个` rm`参数即可 ## 其它问题 * 运行程序时提示： ResourceExhaustedError: OOM when allocating tensor with shape[784,128] 使用`nvidia smi`查看内存使用情况 tensorflow会一次性申请（几乎）所有显存： ``` ➜ ~ nvidia smi Fri Mar 20 09:18:48 2020 + + NVIDIA SMI 435.21 Driver Version: 435.21 CUDA Version: 10.1 + + + GPU Name Persistence M Bus Id Disp.A Volatile Uncorr. ECC Fan Temp Perf Pwr:Usage/Cap Memory Usage GPU Util Compute M. + + 0 GeForce GTX 108... Off 00000000:04:00.0 On N/A 0% 48C P2 60W / 250W 10726MiB / 11178MiB 0% Default + + + + 1 GeForce GTX 108... Off 00000000:81:00.0 Off N/A 0% 47C P2 58W / 250W 197MiB / 11178MiB 0% Default + + + + + + Processes: GPU Memory GPU PID Type Process name Usage 0 3099 G /usr/lib/xorg/Xorg 21MiB 0 40037 C /usr/bin/python3 10693MiB 1 40037 C /usr/bin/python3 185MiB + + ``` 有可能是使用显存的进程太多了，可以适当退出一些进程； 也有可能申请内存重复了 ，可以尝试重启容器解决 * 一直运行没有结果 重启docker 容器解决，总之遇事不决，重启解决。。 * 提示`could not retrieve CUDA device count: CUDA_ERROR_NOT_INITIALIZED` 可能使用了多进程, 新的进程直接拷贝了当前进程的环境,导致错误, 解决办法是**父进程需要引入**, 在子进程中需要使用的时候单独import,而不是写到全局, 参考这里: https://abcdabcd987.com/python multiprocessing/ * `ImportError: libGL.so.1: cannot open shared object file: No such file or directory` ``` apt install libgl1 mesa glx ``` * `Failed to get convolution algorithm. This is probably because cuDNN failed to initialize` 显卡内存不足，检查是不是被其它程序占用了，如果多张显卡，可以设置环境变量`CUDA_VISIBLE_DEVICES`来设置将要使用的显卡， 比如这里共有三张显卡， 下标分别是`0`，`1`，`2`， 选择第三张卡则设置为`2` ```python import os os.environ[\"CUDA_VISIBLE_DEVICES\"] '2' ``` ## 参考 * [https://blog.csdn.net/liuzk2014/article/details/83190267](https://blog.csdn.net/liuzk2014/article/details/83190267) * https://devtalk.nvidia.com/default/topic/1047416/linux/nvidia driver is not loaded ubuntu 18 10 / * https://github.com/tensorflow/tensorflow/issues/394 ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker ## 安装docker"},"/get_started/zh/plugins/others.html":{"title":"teedoc 其它插件","content":" title: teedoc 其它插件 keywords: teedoc, 主题插件, 主题, 插件 desc: teedoc 其它插件 ## `teedoc plugin markdown parser`: 默认 markdown 解析插件 在`site_config.json`中配置插件 ```json \"plugins\": { \"teedoc plugin markdown parser\":{ \"from\": \"pypi\", \"config\": { \"link_abs_path\": true } }, } ``` * `link_abs_path`: 将链接转换为绝对路径 ## `teedoc plugin search`: 网站搜索插件 让网站和文档支持搜索功能，支持所搜当前文档和全站搜索 要使用，在`site_config.json`中添加： ```json \"teedoc plugin search\":{ \"from\": \"pypi\", \"config\": { \"search_hint\": \"Search\" } } ``` 不同文档的提示内容可以在对应的文档`config.json`中配置，以方便做多语言支持（国际化/i18n） 支持的配置如下： ```json \"teedoc plugin search\":{ \"config\": { \"search_hint\": \"搜索\", \"input_hint\": \"输入关键词，多关键词空格隔开\", \"loading_hint\": \"正在加载，请稍候。。。\", \"download_err_hint\": \"下载文件失败，请刷新重试或检查网络\", \"other_docs_result_hint\": \"来自其它文档的结果\", \"curr_doc_result_hint\": \"当前文档搜索结果\" } } ``` * `search_hint`: 搜索框（按钮）的提示信息， 默认`Search` * `input_hint`: 搜索页面搜索框输入提示信息， 默认`Keywords separated by space` * `loading_hint`: 加载搜索所需的文件提示，默认`Loading, wait please ...` * `download_err_hint`: 下载搜索所需的文件失败提示，需要用户刷新浏览器重试或者网络环境无法下载文件， 默认`Download error, please check network and refresh again` * `other_docs_result_hint`: 搜索结果提示，其它文档中的搜索结果， 默认`Result from other docs` * `curr_doc_result_hint`: 搜索结果提示，当前浏览的文档中的搜索结果， 默认`Result from current doc`"},"/get_started/zh/plugins/index.html":{"title":"teedoc 插件","content":" title: teedoc 插件 keywords: teedoc, 插件 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页， 介绍了 teedoc 的的插件 ## 插件使用介绍 teedoc 使用了插件系统，方便扩充功能 在`site_config.json` 文件中， 设置`plugins`字段， 比如 ```json { \"plugins\": { \"teedoc plugin markdown parser\":{ \"from\": \"pypi\", \"config\": { } }, \"teedoc plugin theme default\":{ \"from\": \"pypi\", \"config\": { \"dark\": true, \"env\":{ \"main_color\": \"#4caf7d\" }, \"css\": \"/static/css/custom.css\", \"js\": \"/static/js/custom.js\" } } } } ``` 这里默认安装了两个插件，分别是`teedoc plugin markdown parser`和`teedoc plugin theme default`，均直接从`pypi.org`安装，主题插件有配置项 配置项包括是否使用`dark`主题，以及插件的环境变量`env`，设置了`main_color`为`#4caf7d`，这个值会在插件中用到，将主题色设置为对应的颜色； 以及设置自定义`css`文件和`js`文件，值是`url`，不是文件路径（文件路径和`url`的映射请看前面的`route`（路由）介绍， 通过设置这个`css`文件，可以覆盖主题插件默认的样式，实现简单的自定义功能 * [主题插件](./themes.html) * [其它插件](./others.html)"},"/get_started/zh/plugins/themes.html":{"title":"teedoc 主题插件","content":" title: teedoc 主题插件 keywords: teedoc, 主题插件, 主题, 插件 desc: teedoc 主题插件 ## `teedoc plugin theme default`: 默认主题插件 在`site_config.json`中配置插件 ```json \"plugins\": { \"teedoc plugin theme default\":{ \"from\": \"pypi\", \"config\": { \"dark\": true, \"env\":{ \"main_color\": \"#4caf7d\" }, \"css\": \"/static/css/custom.css\", \"js\": \"/static/js/custom.js\" } } } ``` * `main_color`: 主题主颜色 * `css`: `css`文件，可以覆盖默认的样式，会被插入到页面的`head`标签中 * `js`： `js`文件，可以写`js`程序，会被放在页面的末尾加载 支持 `白天` 和 `夜间` 模式， 夜间模式会在`body`加一个`dark`类， 如果要该夜间模式的`css`样式，可以基于这个类名修改"},"/get_started/zh/index.html":{"title":"Hello","content":" title: Hello keywords: hello world update: date: 2022 09 15 version: 1.2.0 author: xxx content: 修复了错误BBB 优化了内容CCC，参考<a>aaa</a> date: 2022 09 08 version: 1.1.0 author: UUU content: 修复了错误AAA 官网: [teedoc.github.io](https://teedoc.github.io/) 本文档源文件: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) 将 `Markdown` 或者 `Jupyter Notebook` 格式的文档转换为 `HTML` 网页 ## Features [x] 使用简单， 跨平台，只依赖 `Python3` [x] 书写简单，使用 Markdown 语法编写 [ ] Jupyter notebook 支持 [x] 多文档支持 [x] 插件支持 [x] 多主题支持（由插件实现） [x] 通过 css 控制精确到页的样式（通过自定义每页的 id 和 class 实现） [x] 多级目录支持 [x] 多语言支持（手动翻译）(国际化/i18n) [ ] 多语言支持（自动翻译） [x] 多版本支持（实现方法同多语言） [x] 搜索支持 [x] SEO 友好 [x] 实时预览更改 [ ] 博客支持 ## 类似的工具 实际上这种类型的工具已经有很多了，按照自己的需求选择一个就好了 * docusaurus: teedoc 的 UI 布局几乎和它类似，不过它使用 vue 写的， teedoc 是原生 js, 如果你用的是 vue 可以考虑用这个 * gitbook: 曾经很好用的工具，但是官方不维护了，转向商业了，不建议再使用 * docsify: 只需要一个页面，markdown 在浏览器渲染，而不是预先渲染成 HTML， 好处就是轻量，但是 SEO 不太友好，可以用它的 SSR 功能， nodejs 编写 * readthedocs: 很多开源项目使用的工具， 和 gitbook 一样也有网站服务，注册登录就可以开始写文档，也可以下载软件自己生成网站，对 RST 格式支持友好 如果你有选择困难症，那么符合以下部分条件，都建议使用 teedoc： * 功能符合你的需求吗 * 界面符合你的审美吗（可以自定义 css， 或者换主题插件） * 对 Python 熟悉？ 可以随时自定义插件 ## 一些使用建议 * 在 footer 添加 `使用 teedoc 生成`， 帮助更多人发现 teedoc，促进项目的成长 * 使用模板项目开始一个新的文档项目，可以先跑起来，然后再根据自己的需求修改，这样上手更快哦"},"/get_started/zh/syntax/html.html":{"title":"Directly use HTML with jinja2 template support","content":"{% extends \"article.html\" %} {% block html %} {% endblock %} {% block title %} # Directly use HTML with jinja2 template support {% endblock %} {% block content %} This is a html source example {% endblock %} "},"/get_started/zh/syntax/maixpy3-example.html":{"title":"","content":"#MaixPy3基本使用示例时间负责人更新内容备注 2022年1月18日dianjixz编写文档初稿使用jupyternotebook编写，可以直接运行假设你会python，并具有基础的视觉知识，下面是maixpy3的最简程序示例。##\"helloworld!\"确保目标机器已经安装maixpy3软件包。使用maixpy3包在图像上显示\"helloworld!\"。frommaiximportdisplay,image#引入python模块包hello_img image.Image().new(size (240,240),color (255,0,0),mode \"RGB\")#创建一张红色背景图hello_img.draw_string(30,115,\"helloworld!\",scale 1.0,color (255,255,255),thickness 1)#在红色背景图上写下helloworlddisplay.show(hello_img)#把这张图显示出来[ rpyc kernel ]( running at Fri Jan 14 16:48:03 2022 )##从摄像头获取图像并显示使用maixpy3包从摄像头获取图像并显示。frommaiximportcamera,display,image#引入python模块包whileTrue:img camera.capture()#从摄像头中获取一张图像display.show(img)#将图像显示出来##图像的基础操作###图像的画线frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_line(0,0,100,100,color (127,127,127),thickness 1)#画一条从（0,0）到（100,100）的白色线段display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:47:26 2022 )###图像的画框frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_rectangle(80,160,160,200,color (0,0,255),thickness 1)#画一个从（80,160）到（160,200）的蓝色矩形外框img.draw_rectangle(10,10,60,60,color (255,0,0),thickness 1)#画一个从（80,160）到（160,200）的红色实心矩形display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:41:39 2022 )###图像的画圆frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_circle(50,50,20,color (0,0,255),thickness 1)#画一个中心点在（50,50），半径为20的空心蓝圆img.draw_circle(150,150,20,color (255,0,0),thickness 1)#画一个中心点在（150,150），半径为20的实心红圆display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:45:05 2022 )###图像的画字符注意：显示中文时需要加载字库！frommaiximportdisplay,image#引入python模块包hello_img image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图hello_img.draw_string(30,115,\"helloworld!\",scale 1.0,color (255,255,255),thickness 1)#在黑色背景图上写下helloworlddisplay.show(hello_img)#把这张图显示出来[ rpyc kernel ]( running at Fri Jan 14 16:49:17 2022 )###图像的画椭圆frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_ellipse(120,40,20,50,90,0,360,color (0,255,0),thickness 1)display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:49:49 2022 )画椭圆的参数比较复杂，详情请查看miaxpy3API。###图像的打开与保存frommaiximportimage,displayimg image.Image()img.new(size (240,240),mode \"RGB\")img.draw_line(0,0,240,240)img.draw_rectangle(40,120,160,200,color (255,0,0),thickness 16)img.draw_circle(120,120,20,color (0,255,0))img.draw_string(40,40,\"dalaoshu\",2,color (0,0,255))img.save(\"/root/test.png\")tmp image.Image()tmp.open(\"/root/test.png\")display.show(tmp)##vision算法maixpy3中集成了一些常用的vision算法，下面是vision算法的简单使用例子。###寻找色块使用maixpy3的查找色块算法，查找图像中符合颜色阈值的色块。frommaiximportimage,display,camera#导入需要的包bull [(13,11, 91,54,48, 28)]#蓝色的lab阈值whileTrue:img camera.capture()#获取一张图片blobs img.find_blobs(bull)#在图片中查找lab阈值内的颜色色块ifblobs:#判断是否找到颜色foriinblobs:#遍历颜色img.draw_rectangle(i[\"x\"],i[\"y\"],i[\"x\"]+i[\"w\"],i[\"y\"]+i[\"h\"],color (0,0,255),thickness 1)#将找到的颜色区域画出来display.show(img)###视觉找线找线算法是面对小车寻线而开发的一个算法。主要的流程是，灰度化 >自适应阈值处理 >形态学运算 >图像最小二乘法。完成算法流程后返回一条线的信息，让小车能够根据识别出来线的信息进行运动。这个接口比较适合做图像寻线。frommaiximportimage,display,cameraimporttimewhileTrue:img camera.capture()line img.find_line()img.draw_line(line[\"rect\"][0],line[\"rect\"][1],line[\"rect\"][2],line[\"rect\"][3],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][2],line[\"rect\"][3],line[\"rect\"][4],line[\"rect\"][5],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][4],line[\"rect\"][5],line[\"rect\"][6],line[\"rect\"][7],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][6],line[\"rect\"][7],line[\"rect\"][0],line[\"rect\"][1],color (255,255,255),thickness 1)img.draw_circle(line[\"cx\"],line[\"cy\"],4,color (255,255,255),thickness 1)display.show(img)###获取区域的颜色颜色统计算法，统计感兴趣区域最多的颜色并返回。frommaiximportimage,display,cameraimporttimewhileTrue:img camera.capture()colors img.get_blob_color((100,100,10,10),0,0)img.draw_rectangle(100,100,110,110,color (255,0,0),thickness 1)#将找到的颜色区域画出来img.draw_rectangle(9,9,21,21,color (255,255,255),thickness 1)#将找到的颜色区域画出来img.draw_rectangle(10,10,20,20,color (int(colors[0]),int(colors[1]),int(colors[2])),thickness 1)#将找到的颜色区域画出来display.show(img)###识别二维码采用zbar实现，查找画面中出现的二维码。frommaiximportcamera,display,zbarwhileTrue:img camera.capture()result zbar.scan_codes([\"qrcode\",\"code39\"],img)display.show(tmp.draw_string(10,10,str(result),2.0,(255,0,0)))##更多传统视觉方法小编正在努力开发中，敬请期待！！！"},"/get_started/zh/syntax/syntax_markdown.html":{"title":"markdown 语法","content":" title: markdown 语法 tags: teedoc, markdown, 语法 keywords: teedoc, markdown, 语法 desc: teedoc 的 markdown 语法介绍和实例 本文是使用`Markdown`编写的文档，使用`teedoc`生成的页面效果， `Markdown`文件见[这里](https://github.com/teedoc/teedoc.github.io/blob/main/docs/get_started/zh/syntax/syntax_markdown.md) ## Markdown 基本文件内容格式 需要先在`site_config.json`中确认有`markdown`解析插件启用了，比如`teedoc plugin markdown parser`。 在`config.json`对应的目录下建立文件夹或者文件， 比如`get_started/zh/syntax/syntax_markdown.md` (`README.md`最终会生成`index.html`)， 然后编写内容： ### Markdown 文件头 添加一个头 ```markdown title: markdown 语法 tags: teedoc, markdown, 语法 keywords: teedoc, markdown, 语法 desc: teedoc 的 markdown 语法介绍和实例 id: zh_readme class: zh_readme # 以 # 号开头表示注释 ``` 通过这些键值来设置文章信息： * `title`: 文章的标题 * `keywords`: 关键词，多个关键词用英文逗号`,` 隔开，会被添加到`html`头中，方便搜索引擎爬取，不会显示到页面 * `desc`: 页面描述，会被添加到`html`头中，方便搜索引擎爬取 * `tags`： 文章标签，会显示到页面 * `id`: 页面`id`， 会被添加到`html`标签中，比如`<html id \"zh_readme\">...</html>`, 可以不设置，会覆盖`config.json`中的设置 * `class`: 页面`class`,多个用英文逗号`,`隔开，可以不设置，会覆盖`config.json`中的设置。比如可以通过设置这个值来达到设置特定页面的`css`样式。具体支持的样式见[主题插件的文档](../plugins/themes.html) * `layout`: 页面使用的布局模板, 默认不需要这个键值, 会使用主题插件里面的配置,需要你需要自定义这个页面的布局, 可以设置这个参数, 路径相对于`site_config`中的`layout_root_dir`路径, `layout_root_dir` 默认为`layout`, 所以要使用`layout/special_layout.html` 只需要填写`special_layout.html`. 布局模板语法见[layout 文档](../usage/layout_template.html) 另外以`#`号开头则代表是注释 ### Markdown 文件内容 内容就是使用`Markdown`语法进行编写，因为标题会被转成`<h1>`标签，所以内容中建议从二级标题开始，这样一个页面只有一个`<h1>`标签，方便搜索引擎爬取，比如 ```markdown title: teedoc keywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页 id: zh_readme class: zh_readme ## 标题一 内容。。。 ## 标题二 内容。。。 ``` 一级标题（`#`）最好不要使用， 因为上面的`title`会自动生成一个一级标题（`<h1>`标签），一个页面最好只有一个一级标题，方便搜索引擎爬取收录 `keywords` 是生成的 `html` 页面的 `keywords`， 不会显示到页面，主要提供给搜索引擎使用 `desc` 是生成的 `html` 页面的 `description`， 不会显示到页面，主要提供给搜索引擎使用 `tags` 是给文章的标签，会显示在页面 ## 二级标题 {#custom id1} ### 三级标题 {#custom id2} #### 四级标题 #### 四级标题2 #### 四级标题3 ##### 五级标题 ###### 六级标题 最多 6 级标题 ## 链接 [相对路径， README.md 文件](../index.html): `../README.md`， 会自动转换成`index.html` [相对路径， md 文件](./syntax_markdown.html)： `./syntax_markdown.md`， 会转成文档的 `.html` 结尾的链接 [绝对路径， http 文件](https://storage.googleapis.com/tensorflow_docs/docs l10n/site/zh cn/tutorials/quickstart/beginner.ipynb)： `https://。。。/beginner.ipynb`，原链接，不会修改 [相对路径， ipynb 文件](./syntax_jupyter.html)： `./syntax_jupyter.ipynb`， 会转成文档的 `.html` 结尾的链接 ## 列表 列表项: * 包子 * 馒头 * 茶叶蛋 * aaaaaaa * 二级列表 * 二级列表 * 二级列表 * bbbbbb ## code 这是一段行内代码`print(\"hello\")`，或者强调`teedoc` ```python print(\"hello\") print(\"world\") ``` ```c #include \"stdio.h\" int main() { printf(\"hello world\"); } ``` ## 注释(引用块) 下面是一段注释 > 这里是一段注释 (`<blockquote></blockquote>`) > 这是注释的第二行 ```python # 这里是注释里面的代码段 print(\"hello\") ``` > 注释 >> 注释嵌套 >> 注释嵌套 在块引用中使用 markdown 语法 > #### The quarterly results look great! > > Revenue was off the chart. > Profits were higher than ever. > > *Everything* is going according to **plan**. > ```c > printf(\"hello\"); > ``` ## 警告 下面是一段警告信息 >! 这是一段警告信息(`<blockquote class \"spoiler\"></blockquote>`) ## 图片 要显示这张图片，需要在`site_config.json`中设置`route`键值 ![这是一张图片](../../assets/images/logo.png) ![这是一张图片](../assets/images/logo.png) ![这是一张图片](../../assets/images/logo.png)![这是一张图片](../assets/images/logo.png) ## 视频 ```html <video src \"https://****.com/***.mp4\" controls \"controls\" preload \"auto\">your brower not support play video</video> ``` 这里没有放视频， 所以是空白, 放入正确的视频就可以播放了 <video src \"\" controls \"controls\" preload \"auto\">your brower or site not support play video</video> ## iframe 嵌入网页 <iframe src \"//player.bilibili.com/player.html?aid 52613549&bvid BV144411J72P&cid 92076022&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"width:43vw;height:34vw;min width: 85%;\"> </iframe> ## 引用标记 我能干饭我自豪。[^干饭人] [^干饭人]: 老子说道 这会在文章末尾进行注解 ## 划线 我是~~天神~~打工人啊 ## 表格 Header 1 *Header* 2 `Cell 1` [Cell 2](http://example.com) link Cell 3 **Cell 4** ## 任务列表 [x] 任务1 [x] 任务2 [ ] 任务3 [ ] 任务4 ## 标题链接(页内跳转) 比如要跳转到标题[Markdown 文件头](#Markdown 文件头), 只需 ```markdown [Markdown 文件头](#Markdown 文件头) ``` 这里空格使用了减号` `替换 ## HTML ```html <div class \"hello\"> hello <img src \"../../assets/images/logo.png\"/> </div> ``` 注意这里没有空行, 效果如下 <div class \"hello\"> hello <br/> <img src \"../../assets/images/logo.png\"/> </div> ## 数学 支持`tex`和`Latex`语法，以及`MathML`标签 两种写法， * 一种是行内内嵌，用`$`符号将方程包起来，比如 ```markdown 质能方程 $E mc^2$大家很熟悉吧 ``` > 效果: > 质能方程 $E mc^2$大家很熟悉吧 * 另一种，块方程，用`$$`将方程包起来，比如 ```markdown $$ E mc^2 $$ ``` > 效果: > $$ > E mc^2 > $$ 其他例子： 常见： ```markdown When $a \\ne 0$, there are two solutions to $ax^2 + bx + c 0$ and they are $$ x { b \\pm \\sqrt{b^2 4ac} \\over 2a}. $$ ``` > When $a \\ne 0$, there are two solutions to $ax^2 + bx + c 0$ and they are > $$ > x { b \\pm \\sqrt{b^2 4ac} \\over 2a}. > $$ 除法式： ```markdown $$ \\require{enclose} \\begin{array}{r} 13 \\\\[ 3pt] 4 \\enclose{longdiv}{52} \\\\[ 3pt] \\underline{4}\\phantom{2} \\\\[ 3pt] 12 \\\\[ 3pt] \\underline{12}\\\\0 \\end{array}\\\\ $$ ``` > $$ > \\require{enclose} > \\begin{array}{r} > 13 \\\\[ 3pt] > 4 \\enclose{longdiv}{52} \\\\[ 3pt] > \\underline{4}\\phantom{2} \\\\[ 3pt] > 12 \\\\[ 3pt] > \\underline{12}\\\\0 > \\end{array}\\\\ > $$ 加框： ```markdown $$ \\bbox[#cde, 3px,border:1px solid blue]{y x^2 1} $$ ``` > $$ > \\bbox[#cde, 3px,border:1px solid blue]{y x^2 1} > $$ ## mermaid 支持 使用 mermaid 可以画很多类型的图表， 详细的语法和支持请看[官网](https://mermaid js.github.io/) <pre class \"language markdown\"> <code> ```mermaid sequenceDiagram Alice >>John: Hello John, how are you? loop Healthcheck John >>John: Fight against hypochondria end Note right of John: Rational thoughts! John >>Alice: Great! John >>Bob: How about you? Bob >>John: Jolly good! ``` </code> </pre> 或者直接 `html`: ```html <div class \"mermaid\"> sequenceDiagram Alice >>John: Hello John, how are you? loop Healthcheck John >>John: Fight against hypochondria end Note right of John: Rational thoughts! John >>Alice: Great! John >>Bob: How about you? Bob >>John: Jolly good! </div> ``` 效果： ```mermaid sequenceDiagram Alice >>John: Hello John, how are you? loop Healthcheck John >>John: Fight against hypochondria end Note right of John: Rational thoughts! John >>Alice: Great! John >>Bob: How about you? Bob >>John: Jolly good! ``` ## 标签页（tabset）支持 > 试验性功能，因为不是标准 Markdown 语法，目前仅 teedoc 支持，所以根据你的需求选择使用 > 当然也欢迎将格式推广到其它解析器 效果： .. tabset::标签页标题（可选） :id: tabset1 ## 标签一 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` ## 标签二 内容二，可以使用 Markdown 语法 ```java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } ``` 在选中一个页面中的某个标签时，会自动选中相同`id`的标签页中的相应标签，不相同`id`或者没设置`id`则不会。 .. tabset::标签页标题（可选） :id: tabset1 ## 标签一 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` ## 标签二 内容二，可以使用 Markdown 语法 ```java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } ``` .. tabset::标签页标题（可选） ## 标签一 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` ## 标签二 内容二，可以使用 Markdown 语法 ```java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } ``` 源码： ``` 效果： （注意这里需要空一行） .. tabset::标签页标题（可选） :id: tabset1 ## 标签一 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` ## 标签二 内容二，可以使用 Markdown 语法 ```java public class Main { public static void main(String[] args) { System.out.println(\"Hello World\"); } } ``` ``` ## 详情页（details）支持 > 试验性功能，因为不是标准 Markdown 语法，目前仅 teedoc 支持，所以根据你的需求选择使用 > 当然也欢迎将格式推广到其它解析器 这是对 `HTML5` `details`标签的一种 `Markdown` 语法， `HTML`这样写: ```html <details> <summary>标题，点击展开</summary> <div class \"details content\"> <p>这里是内容</p> </div> </details> ``` 效果： .. details::标题，点击展开 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` .. details::标题，默认展开 :open: true 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` 源码： ``` .. details::标题，点击展开 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` .. details::标题，默认展开 :open: true 内容一，可以使用 Markdown 语法 ```kotlin fun main() { println(\"Hello World\") } ``` ``` ## Definition lists First Term : This is the definition of the first term. Second Term : This is one definition of the second term. : This is another definition of the second term. ## Strikethrough ~~two tilde~~ ~one tilde~ ## Emoji copy and paste: ☕ not support shortcodes: :joy: ## Subscript H~2~O H~~O 你好呀~你好呀~你好呀 你好呀~ 你好呀~你好呀 ## Superscript X^2^ ## Abbreviation *[HTML]: Hyper Text Markup Language The HTML specification is maintained by the W3C."},"/get_started/zh/syntax/syntax_notebook.html":{"title":"ipynb 文件测试","content":"##初学者的TensorFlow2.0教程###三级标题####四级标题###三级标题2####四级标题2##Title2###标题2.1print(\"hello\")hello###标题2.2##链接[相对路径，README.md文件](../README.md):`../README.md`，会自动转换成`index.html`[相对路径，md文件](./syntax_markdown.md)：`./syntax_markdown.md`，会转成文档的`.html`结尾的链接[绝对路径，http文件](https://storage.googleapis.com/tensorflow_docs/docs l10n/site/zh cn/tutorials/quickstart/beginner.ipynb)：`https://。。。/beginner.ipynb`，原链接，不会修改[相对路径，ipynb文件](./syntax_notebook.ipynb)：`./syntax_notebook.ipynb`，会转成文档的`.html`结尾的链接##图片![](../assets/images/teedoc_logo.png)print(\"hello\")helloprint(\"world\\nworld\")world worldfromPILimportImageimg Image.open(\"../assets/images/teedoc_logo.png\")frommatplotlibimportpyplotaspltprint(\"image\")plt.figure()plt.imshow(img)plt.show()print(\"image\")imageimage"},"/get_started/zh/usage/deploy.html":{"title":"部署 teedoc 生成的网站","content":" title: 部署 teedoc 生成的网站 keywords: teedoc, 部署 desc: teedoc 生成的网站部署到服务器 由于 `teedoc` 生成的网页都是静态网页，所以直接按照常规的部署静态页面的方式部署即可 `teedoc`生成的页面会在`out`目录 使用`teedoc serve`会起一个`HTTP`服务，但是请不要使用在生产环境，是不可靠的 对于生产环境，这里有几个简单实用的方法： * [部署到 github pages](./deploy_github_pages.html) * [使用 nginx 部署到自建服务器](./deploy_nginx.html) * [使用 CDN 加速网站](./deploy_cdn.html)"},"/get_started/zh/usage/deploy_cdn.html":{"title":"部署 teedoc 生成的网站到 CDN","content":" title: 部署 teedoc 生成的网站到 CDN keywords: teedoc, 部署, CDN desc: teedoc 生成的网站部署到 CDN 为了让各个地方的用户访问站点更加快速，可以使用 CDN 加速， 原理简单介绍就是先把网站放在一个源服务器上， 然后将这个资源同步到全国甚至全世界各地的节点上， 浏览器想要通过域名访问网站，这个域名指向的服务器只做一件事情，就是解析浏览器的地点，然后返回给给浏览器离浏览器最近的节点 IP 地址，然后浏览器直接访问最近的节点，从而实现了加速 先找一个 `CDN` 提供商，比如 阿里云 腾讯云 七牛云 都可以 然后步骤如下： ## 方法一 直接使用这些提供商的空间， 一般都有免费额度，直接上传这个网站到服务商的空间里面，服务商会分配一个临时域名，启用 `CDN` 就可以直接访问了，很简单。 但是缺点就是每次更新都要重新上传，不好弄，用方法二可以简单解决 ## 方法二 自己创建源服务器，源服务器更新后，服务商自动同步更新到各个节点 ### 创建一个源服务器（源网站） 按照前面的方法建立一个网站 ，得到`域名A`， 比如`teedoc.github.io` ### 为网站添加 CDN 加速 如果是中国国内的服务商，需要先有一个备案的`域名B` ，然后注册登录，添加一个 `CDN`服务， 设置回源站点为前面建立的网站`域名A`即可 然后访问`域名B`，服务商会自动从`域名A`出拉取网页同步到全国或者全球的各个节点，然后用户访问`域名B`就会重定向到离用户最近的节点的`IP`，以保证最快的浏览速度"}}