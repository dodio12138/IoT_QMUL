{"/get_started/en/index.html":{"title":"Hello","content":" title: Hello date: 2022 09 03 update: date: 2022 09 15 version: 1.2.0 author: xxx content: 修复了错误BBB 优化了内容CCC，参考<a>aaa</a> date: 2022 09 08 version: 1.1.0 author: UUU content: 修复了错误AAA Official website: [teedoc.neucrack.com](https://teedoc.neucrack.com/) or [teedoc.github.io](https://teedoc.github.io/) Source file of this document: [github.com/teedoc/teedoc.github.io](https://github.com/teedoc/teedoc.github.io) Source code: [https://github.com/teedoc/teedoc](https://github.com/teedoc/teedoc) Welcome star Convert documents in `Markdown` or `Jupyter Notebook` format into `HTML` static web pages `teedoc` can be used in the following scenarios: * Build a document website, and it’s best to support multiple documents and custom pages * Build a `WiKi` website * Build a personal or corporate knowledge base * Build a personal or corporate website * Blog If you encounter problems during use, you can find similar problems in [here](https://github.com/teedoc/teedoc/issues) (you need to register and log in to github) to find similar issues, or create an issue ## Features [x] Simple to use, cross platform, only dependent on `Python3` [x] No database required, all static pages of the website [x] The deployment is simple, the generated website is a fully static page, which can be directly copied to the server or uploaded to a third party organization for deployment [x] Easy to write, using Markdown syntax [x] Jupyter notebook support [x] HTML support, you can directly use HTML to write pages, with great freedom [x] Multi document support [x] Plug in support [x] Multi theme support (implemented by plug in) [x] Control the style accurate to the page through css (implemented by customizing the id and class of each page) [x] Multi level directory support(infinite levels) [x] Multi language support (manual translation) (Internationalization/i18n) [ ] Multilingual support (automatic translation) [x] Multi version support (implementation method is the same as multi language) [x] Search support [x] SEO friendly [x] Real time preview of changes [x] Multi threaded construction, faster construction speed [x] Blog support [x] Switch from gitbook is easy, just config `route` and convert `SUMMARY.md` by `summary2yaml` command [x] Comments(Plugins), e.g. `gitalk` ## Demo [This website](https://teedoc.github.io/) is generated using `teedoc`, what you see now is what the generated website looks like. In addition, there are other websites that use `teedoc`, please see [here](./usage/sites.html) for details ## Similar tools In fact, there are many tools of this type, but each one is slightly different. Just choose one according to your needs. If you have choice difficulties, you are recommended to use teedoc if you meet some of the following conditions: * Use `Jupyter notebook` to write documents or code? Decisively choose teedoc * Does the function meet your needs? * Does the interface meet your aesthetics (you can customize css, or change the theme plug in) * Familiar with Python? Plug ins and functions can be customized at any time Other similar tools: * docusaurus: The UI layout of teedoc is almost similar to it, but it uses vue to write, teedoc is native js, if you use vue, you can consider this * gitbook: a tool that used to be very useful, but it is no longer maintained by the government, and it is turned to commercial. It is not recommended to use it * docsify: Only one page is needed. Markdown is rendered in the browser instead of pre rendered into HTML. The advantage is that it is lightweight, but SEO is not friendly. You can use its SSR function, written in nodejs * readthedocs: A tool used by many open source projects. Like gitbook, it also has a website service. You can start writing documents after registering and logging in, or you can download the software to generate the website yourself, which is friendly to the RST format. ## Some usage suggestions * Add `Generate with teedoc` in footer to help more people discover teedoc and promote the growth of the project * Use the template project to start a new document project, you can run it first, and then modify it according to your own needs, so that you can get started faster"},"/get_started/en/syntax/maixpy3-example.html":{"title":"","content":"#MaixPy3基本使用示例时间负责人更新内容备注 2022年1月18日dianjixz编写文档初稿使用jupyternotebook编写，可以直接运行假设你会python，并具有基础的视觉知识，下面是maixpy3的最简程序示例。##\"helloworld!\"确保目标机器已经安装maixpy3软件包。使用maixpy3包在图像上显示\"helloworld!\"。frommaiximportdisplay,image#引入python模块包hello_img image.Image().new(size (240,240),color (255,0,0),mode \"RGB\")#创建一张红色背景图hello_img.draw_string(30,115,\"helloworld!\",scale 1.0,color (255,255,255),thickness 1)#在红色背景图上写下helloworlddisplay.show(hello_img)#把这张图显示出来[ rpyc kernel ]( running at Fri Jan 14 16:48:03 2022 )##从摄像头获取图像并显示使用maixpy3包从摄像头获取图像并显示。frommaiximportcamera,display,image#引入python模块包whileTrue:img camera.capture()#从摄像头中获取一张图像display.show(img)#将图像显示出来##图像的基础操作###图像的画线frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_line(0,0,100,100,color (127,127,127),thickness 1)#画一条从（0,0）到（100,100）的白色线段display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:47:26 2022 )###图像的画框frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_rectangle(80,160,160,200,color (0,0,255),thickness 1)#画一个从（80,160）到（160,200）的蓝色矩形外框img.draw_rectangle(10,10,60,60,color (255,0,0),thickness 1)#画一个从（80,160）到（160,200）的红色实心矩形display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:41:39 2022 )###图像的画圆frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_circle(50,50,20,color (0,0,255),thickness 1)#画一个中心点在（50,50），半径为20的空心蓝圆img.draw_circle(150,150,20,color (255,0,0),thickness 1)#画一个中心点在（150,150），半径为20的实心红圆display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:45:05 2022 )###图像的画字符注意：显示中文时需要加载字库！frommaiximportdisplay,image#引入python模块包hello_img image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图hello_img.draw_string(30,115,\"helloworld!\",scale 1.0,color (255,255,255),thickness 1)#在黑色背景图上写下helloworlddisplay.show(hello_img)#把这张图显示出来[ rpyc kernel ]( running at Fri Jan 14 16:49:17 2022 )###图像的画椭圆frommaiximportimage,displayimg image.Image().new(size (240,240),color (0,0,0),mode \"RGB\")#创建一张黑色背景图img.draw_ellipse(120,40,20,50,90,0,360,color (0,255,0),thickness 1)display.show(img)[ rpyc kernel ]( running at Fri Jan 14 16:49:49 2022 )画椭圆的参数比较复杂，详情请查看miaxpy3API。###图像的打开与保存frommaiximportimage,displayimg image.Image()img.new(size (240,240),mode \"RGB\")img.draw_line(0,0,240,240)img.draw_rectangle(40,120,160,200,color (255,0,0),thickness 16)img.draw_circle(120,120,20,color (0,255,0))img.draw_string(40,40,\"dalaoshu\",2,color (0,0,255))img.save(\"/root/test.png\")tmp image.Image()tmp.open(\"/root/test.png\")display.show(tmp)##vision算法maixpy3中集成了一些常用的vision算法，下面是vision算法的简单使用例子。###寻找色块使用maixpy3的查找色块算法，查找图像中符合颜色阈值的色块。frommaiximportimage,display,camera#导入需要的包bull [(13,11, 91,54,48, 28)]#蓝色的lab阈值whileTrue:img camera.capture()#获取一张图片blobs img.find_blobs(bull)#在图片中查找lab阈值内的颜色色块ifblobs:#判断是否找到颜色foriinblobs:#遍历颜色img.draw_rectangle(i[\"x\"],i[\"y\"],i[\"x\"]+i[\"w\"],i[\"y\"]+i[\"h\"],color (0,0,255),thickness 1)#将找到的颜色区域画出来display.show(img)###视觉找线找线算法是面对小车寻线而开发的一个算法。主要的流程是，灰度化 >自适应阈值处理 >形态学运算 >图像最小二乘法。完成算法流程后返回一条线的信息，让小车能够根据识别出来线的信息进行运动。这个接口比较适合做图像寻线。frommaiximportimage,display,cameraimporttimewhileTrue:img camera.capture()line img.find_line()img.draw_line(line[\"rect\"][0],line[\"rect\"][1],line[\"rect\"][2],line[\"rect\"][3],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][2],line[\"rect\"][3],line[\"rect\"][4],line[\"rect\"][5],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][4],line[\"rect\"][5],line[\"rect\"][6],line[\"rect\"][7],color (255,255,255),thickness 1)img.draw_line(line[\"rect\"][6],line[\"rect\"][7],line[\"rect\"][0],line[\"rect\"][1],color (255,255,255),thickness 1)img.draw_circle(line[\"cx\"],line[\"cy\"],4,color (255,255,255),thickness 1)display.show(img)###获取区域的颜色颜色统计算法，统计感兴趣区域最多的颜色并返回。frommaiximportimage,display,cameraimporttimewhileTrue:img camera.capture()colors img.get_blob_color((100,100,10,10),0,0)img.draw_rectangle(100,100,110,110,color (255,0,0),thickness 1)#将找到的颜色区域画出来img.draw_rectangle(9,9,21,21,color (255,255,255),thickness 1)#将找到的颜色区域画出来img.draw_rectangle(10,10,20,20,color (int(colors[0]),int(colors[1]),int(colors[2])),thickness 1)#将找到的颜色区域画出来display.show(img)###识别二维码采用zbar实现，查找画面中出现的二维码。frommaiximportcamera,display,zbarwhileTrue:img camera.capture()result zbar.scan_codes([\"qrcode\",\"code39\"],img)display.show(tmp.draw_string(10,10,str(result),2.0,(255,0,0)))##更多传统视觉方法小编正在努力开发中，敬请期待！！！"},"/get_started/en/syntax/syntax_markdown.html":{"title":"markdown 语法","content":" title: markdown 语法 tags: teedoc, markdown, 语法 keywords: teedoc, markdown, 语法 desc: teedoc 的 markdown 语法介绍和实例 本文是使用`Markdown`编写的文档，使用`teedoc`生成的页面效果， `Markdown`文件见[这里](https://github.com/teedoc/teedoc.github.io/blob/main/docs/get_started/zh/syntax/syntax_markdown.md) ## Markdown 基本文件内容格式 需要先在`site_config.json`中确认有`markdown`解析插件启用了，比如`teedoc plugin markdown parser`。 在`config.json`对应的目录下建立文件夹或者文件， 比如`get_started/zh/syntax/syntax_markdown.md` (`README.md`最终会生成`index.html`)， 然后编写内容： ### Markdown 文件头 添加一个头 ```markdown title: markdown 语法 tags: teedoc, markdown, 语法 keywords: teedoc, markdown, 语法 desc: teedoc 的 markdown 语法介绍和实例 teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例teedoc 的 markdown 语法介绍和实例 id: zh_readme class: zh_readme ``` 通过这些键值来设置文章信息： * `title`: 文章的标题 * `keywords`: 关键词，多个关键词用英文逗号`,` 隔开，会被添加到`html`头中，方便搜索引擎爬取，不会显示到页面 * `desc`: 页面描述，会被添加到`html`头中，方便搜索引擎爬取 * `tags`： 文章标签，会显示到页面 * `id`: 页面`id`， 会被添加到`html`标签中，比如`<html id \"zh_readme\">...</html>`, 可以不设置，会覆盖`config.json`中的设置 * `class`: 页面`class`,多个用英文逗号`,`隔开，可以不设置，会覆盖`config.json`中的设置。比如可以通过设置这个值来达到设置特定页面的`css`样式 * `layout`: 页面使用的布局模板, 默认不需要这个键值, 会使用主题插件里面的配置,需要你需要自定义这个页面的布局, 可以设置这个参数, 路径相对于`site_config`中的`layout_root_dir`路径, `layout_root_dir` 默认为`layout`, 所以要使用`layout/special_layout.html` 只需要填写`special_layout.html`. 布局模板语法见[layout 文档](../usage/layout_template.html) ### Markdown 文件内容 内容就是使用`Markdown`语法进行编写，因为标题会被转成`<h1>`标签，所以内容中建议从二级标题开始，这样一个页面只有一个`<h1>`标签，方便搜索引擎爬取，比如 ```markdown title: teedoc keywords: teedoc, markdown, jupyter notebook, html, 文档生成, 替代gitbook, 网站生成, 静态网站 desc: teedoc， 将 markdown 或者 jupyter notbook 转换成 html 静态网页 id: zh_readme class: zh_readme ## 标题一 内容。。。 ## 标题二 内容。。。 ``` 一级标题（`#`）最好不要使用， 因为上面的`title`会自动生成一个一级标题（`<h1>`标签），一个页面最好只有一个一级标题，方便搜索引擎爬取收录 `keywords` 是生成的 `html` 页面的 `keywords`， 不会显示到页面，主要提供给搜索引擎使用 `desc` 是生成的 `html` 页面的 `description`， 不会显示到页面，主要提供给搜索引擎使用 `tags` 是给文章的标签，会显示在页面 ## Header 2 ### Header 3 #### Header 4 #### Header 4.2 #### Header 4.3 ##### Header 5 ###### Header 6 max 6 level header ## 链接 [相对路径， README.md 文件](../index.html): `../README.md`， 会自动转换成`index.html` [相对路径， md 文件](./syntax_markdown.html)： `./syntax_markdown.md`， 会转成文档的 `.html` 结尾的链接 [绝对路径， http 文件](https://storage.googleapis.com/tensorflow_docs/docs l10n/site/zh cn/tutorials/quickstart/beginner.ipynb)： `https://。。。/beginner.ipynb`，原链接，不会修改 [相对路径， ipynb 文件](./syntax_jupyter.html)： `./syntax_jupyter.ipynb`， 会转成文档的 `.html` 结尾的链接 ## 列表 列表项: * 包子 * 馒头 * 茶叶蛋 * aaaaaaa * 二级列表 * 二级列表 * 二级列表 * bbbbbb ## code 这是一段行内代码`print(\"hello\")`，或者强调`teedoc` ```python print(\"hello\") print(\"world\") ``` ```c #include \"stdio.h\" int main() { printf(\"hello world\"); } ``` ## 注释(引用块) 下面是一段注释 > 这里是一段注释 (`<blockquote></blockquote>`) > 这是注释的第二行 ```python # 这里是注释里面的代码段 print(\"hello\") ``` > 注释 >> 注释嵌套 >> 注释嵌套 ## 警告 下面是一段警告信息 >! 这是一段警告信息(`<blockquote class \"spoiler\"></blockquote>`) ## 图片 要显示这张图片，需要在`site_config.json`中设置`route`键值 ![这是一张图片](../../assets/images/logo.png) ![这是一张图片](../assets/images/logo.png) ![这是一张图片](../../assets/images/logo.png)![这是一张图片](../assets/images/logo.png) ## 视频 ```html <video src \"https://****.com/***.mp4\" controls \"controls\" preload \"auto\">your brower not support play video</video> ``` 这里没有放视频， 所以是空白, 放入正确的视频就可以播放了 <video src \"\" controls \"controls\" preload \"auto\">your brower or site not support play video</video> ## iframe 嵌入网页 <iframe src \"//player.bilibili.com/player.html?aid 52613549&bvid BV144411J72P&cid 92076022&page 1\" scrolling \"no\" border \"0\" frameborder \"no\" framespacing \"0\" allowfullscreen \"true\" style \"width:43vw;height:34vw;min width: 85%;\"> </iframe> ## 引用标记 我能干饭我自豪。[^干饭人] [^干饭人]: 老子说道 这会在文章末尾进行注解 ## 划线 我是~~天神~~打工人啊 ## 表格 Header 1 *Header* 2 `Cell 1` [Cell 2](http://example.com) link Cell 3 **Cell 4** ## 任务列表 [x] 任务1 [x] 任务2 [ ] 任务3 [ ] 任务4 ## 标题链接(页内跳转) 比如要跳转到标题[Markdown 文件头](#Markdown 文件头), 只需 ```markdown [Markdown 文件头](#Markdown 文件头) ``` 这里空格使用了减号` `替换 ## HTML ```html <div class \"hello\"> hello <img src \"../../assets/images/logo.png\"/> </div> ``` 注意这里没有空行, 效果如下 <div class \"hello\"> hello <br/> <img src \"../../assets/images/logo.png\"/> </div> ## 数学 内嵌的Katex效果$E mc^2$就是这样 When $a \\ne 0$, there are two solutions to $ax^2 + bx + c 0$ and they are $$ x { b \\pm \\sqrt{b^2 4ac} \\over 2a}. $$ $$ \\require{enclose} \\begin{array}{r} 13 \\\\[ 3pt] 4 \\enclose{longdiv}{52} \\\\[ 3pt] \\underline{4}\\phantom{2} \\\\[ 3pt] 12 \\\\[ 3pt] \\underline{12}\\\\0 \\end{array}\\\\ $$ $$ \\bbox[#cde, 3px,border:1px solid blue]{y x^2 1} $$"},"/get_started/en/syntax/syntax_notebook.html":{"title":"ipynb 文件测试","content":"##初学者的TensorFlow2.0教程###三级标题####四级标题###三级标题2####四级标题2##Title2###标题2.1print(\"hello\")hello###标题2.2##链接[相对路径，README.md文件](../README.md):`../README.md`，会自动转换成`index.html`[相对路径，md文件](./syntax_markdown.md)：`./syntax_markdown.md`，会转成文档的`.html`结尾的链接[绝对路径，http文件](https://storage.googleapis.com/tensorflow_docs/docs l10n/site/zh cn/tutorials/quickstart/beginner.ipynb)：`https://。。。/beginner.ipynb`，原链接，不会修改[相对路径，ipynb文件](./syntax_notebook.ipynb)：`./syntax_notebook.ipynb`，会转成文档的`.html`结尾的链接##图片![](../assets/images/teedoc_logo.png)print(\"hello\")helloprint(\"world\\nworld\")world worldfromPILimportImageimg Image.open(\"../assets/images/teedoc_logo.png\")frommatplotlibimportpyplotaspltprint(\"image\")plt.figure()plt.imshow(img)plt.show()print(\"image\")imageimage"},"/get_started/en/\\no_translate.html":{"title":"no translation","content":" title: no translation class: md_page <div id \"visit_from\"></div> <div id \"no_translate_hint\">This page not translated yet</div> <div> <span id \"visit_hint\">Please visit</span> <a id \"translate_src\"></a> </div> <div> <script> function getQueryVariable(variable) { var query window.location.search.substring(1); var vars query.split(\"&\"); for (var i 0;i<vars.length;i++) { var pair vars[i].split(\" \"); if(pair[0] variable){return pair[1];} } return(false); } var ref getQueryVariable(\"ref\"); var from getQueryVariable(\"from\"); var link document.getElementById(\"translate_src\"); var fromDis document.getElementById(\"visit_from\"); link.href ref; link.text ref; fromDis.innerHTML from; </script> </div>"}}